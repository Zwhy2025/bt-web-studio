{
  "controlFlow": "控制流",
  "composite": "复合节点",
  "decorator": "装饰器",
  "action": "动作",
  "condition": "条件",
  "subtree": "子树",
  "sequence": "序列",
  "selector": "选择器",
  "fallback": "回退",
  "parallel": "并行",
  "sequenceWithMemory": "带记忆序列",
  "selectorWithMemory": "带记忆选择器",
  "reactiveSequence": "响应式序列",
  "reactiveSelector": "响应式选择器",
  "randomSequence": "随机序列",
  "randomSelector": "随机选择器",
  "ifThenElse": "条件分支",
  "whileDoElse": "循环条件",
  "inverter": "反转器",
  "forceSuccess": "强制成功",
  "forceFailure": "强制失败",
  "repeat": "重复",
  "retry": "重试",
  "timeout": "超时",
  "delay": "延迟",
  "cooldown": "冷却",
  "blackboardPrecondition": "黑板前置条件",
  "blackboardCheck": "黑板检查",
  "alwaysSuccess": "总是成功",
  "alwaysFailure": "总是失败",
  "alwaysRunning": "总是运行",
  "customAction": "自定义动作",
  "customCondition": "自定义条件",
  "scriptAction": "脚本动作",
  "scriptCondition": "脚本条件",
  "moveToTarget": "移动到目标",
  "rotate": "旋转",
  "wait": "等待",
  "log": "日志",
  "setBlackboard": "设置黑板",
  "getBlackboard": "获取黑板",
  "isTargetReached": "是否到达目标",
  "isInRange": "是否在范围内",
  "hasTarget": "是否有目标",
  "isHealthLow": "生命值是否过低",
  "isEnemyVisible": "敌人是否可见",
  "isPathClear": "路径是否畅通",
  "nodeCategories": {
    "all": "全部",
    "control": "控制流",
    "action": "动作",
    "condition": "条件",
    "decorator": "装饰器",
    "custom": "自定义",
    "favorite": "收藏",
    "recent": "最近使用"
  },
  "nodeStatus": {
    "idle": "空闲",
    "running": "运行中",
    "success": "成功",
    "failure": "失败",
    "invalid": "无效",
    "skipped": "已跳过"
  },
  "nodeResults": {
    "undefined": "未定义",
    "success": "成功",
    "failure": "失败",
    "running": "运行中"
  },
  "portTypes": {
    "input": "输入",
    "output": "输出",
    "bidirectional": "双向"
  },
  "dataTypes": {
    "string": "字符串",
    "number": "数字",
    "boolean": "布尔值",
    "vector": "向量",
    "object": "对象",
    "array": "数组",
    "any": "任意类型"
  },
  "nodeNames": {
    "AlwaysFailure": "总是失败",
    "AlwaysSuccess": "总是成功",
    "Script": "脚本",
    "SetBlackboard": "设置黑板",
    "Sleep": "等待",
    "ScriptCondition": "脚本条件",
    "AsyncFallback": "异步回退",
    "AsyncSequence": "异步序列",
    "Fallback": "回退",
    "IfThenElse": "条件分支",
    "Parallel": "并行",
    "ParallelAll": "并行全部",
    "ReactiveFallback": "响应式回退",
    "ReactiveSequence": "响应式序列",
    "Sequence": "序列",
    "SequenceWithMemory": "带记忆序列",
    "Switch2": "双分支",
    "Switch3": "三分支",
    "Switch4": "四分支",
    "Switch5": "五分支",
    "Switch6": "六分支",
    "WhileDoElse": "循环条件",
    "Delay": "延迟",
    "ForceFailure": "强制失败",
    "ForceSuccess": "强制成功",
    "Inverter": "反转器",
    "KeepRunningUntilFailure": "继续运行直到失败",
    "LoopDouble": "循环两次",
    "LoopString": "字符串循环"
  },
  "categoryNames": {
    "action": "动作节点 (Action)",
    "condition": "条件节点 (Condition)",
    "control": "控制节点 (Control)",
    "decorator": "装饰器节点 (Decorator)"
  },
  "collapseSubtree": "折叠子树",
  "expandSubtree": "展开子树",
  "parameters": "参数",
  "ports": "端口",
  "default": "默认",
  "searchNodes": "搜索节点...",
  "totalNodes": "共 {{count}} 个节点",
  "searchResult": "搜索",
  "actionNodes": "动作节点",
  "conditionNodes": "条件节点",
  "controlNodes": "控制节点",
  "decoratorNodes": "装饰器节点",
  "subtreeNodes": "子树节点",
  "actionNodesDesc": "执行具体动作的叶子节点",
  "conditionNodesDesc": "检查条件状态的叶子节点",
  "controlNodesDesc": "控制行为树执行流程的节点",
  "decoratorNodesDesc": "修改子节点行为的装饰器节点",
  "subtreeNodesDesc": "用于嵌套执行一组节点，形成一个子树",
  "nodeDescriptions": {
    "AlwaysFailure": "永远返回 FAILURE，无论子节点的执行结果如何，通常用于快速回退。",
    "AlwaysSuccess": "永远返回 SUCCESS，无论子节点的执行结果如何，常用于吞掉失败并确保父节点继续执行。",
    "Script": "执行指定的脚本，通常是用户自定义的操作或函数。",
    "SetBlackboard": "将某些数据存储在黑板中，供其他节点使用。用于记录节点状态或更新共享数据。",
    "Sleep": "延迟执行，暂停当前节点的执行，用于等待或延时操作。",
    "ScriptCondition": "执行脚本条件检查，通常用于验证某些条件是否成立，决定行为树的流向。",
    "AsyncFallback": "异步的回退节点，逐一执行子节点，直到某个子节点返回 SUCCESS 或 FAILURE。",
    "AsyncSequence": "异步的顺序节点，依次执行每个子节点，直到所有节点都返回 SUCCESS 或某个节点返回 FAILURE。",
    "Fallback": "回退节点，如果当前节点失败，则执行下一个子节点。",
    "IfThenElse": "如果条件成立则执行某个子节点，否则执行另一个子节点。",
    "Parallel": "并行执行多个子节点，直到达到一定的成功/失败条件。",
    "ParallelAll": "与 Parallel 类似，但要求所有子节点都成功时才返回 SUCCESS。",
    "ReactiveFallback": "异步回退节点，类似于 Fallback，但在状态发生变化时进行实时回退。",
    "ReactiveSequence": "异步顺序节点，类似于 Sequence，但节点状态变化时可重新评估执行顺序。",
    "Sequence": "顺序节点，按顺序执行子节点，直到某个节点返回 FAILURE。",
    "SequenceWithMemory": "具有记忆功能的顺序节点，记录每个节点的执行状态并能在以后重新执行。",
    "Switch2": "选择节点，根据条件选择执行不同的子节点。",
    "Switch3": "与 Switch2 类似，但有三个选择条件。",
    "Switch4": "四种选择条件，根据不同的条件执行不同的子节点。",
    "Switch5": "与 Switch4 类似，但有五个选择条件。",
    "Switch6": "六种选择条件，根据不同的条件执行不同的子节点。",
    "WhileDoElse": "当条件成立时，重复执行某个子节点，否则执行备用节点。",
    "Delay": "延迟执行节点，指定一个时间段后再执行子节点。",
    "ForceFailure": "强制节点返回 FAILURE，不管子节点的执行结果如何。",
    "ForceSuccess": "强制节点返回 SUCCESS，不管子节点的执行结果如何。",
    "Inverter": "反转子节点的执行结果，SUCCESS 变为 FAILURE，反之亦然。",
    "KeepRunningUntilFailure": "一直运行直到子节点失败，常用于执行长时间任务直到达到某个失败条件。",
    "LoopDouble": "重复执行子节点两次。",
    "LoopString": "根据字符串条件循环执行节点。",
    "Precondition": "在执行节点之前检查某些条件，如果条件不成立，则跳过节点。",
    "Repeat": "重复执行子节点，直到达到某个条件（如成功、失败等）。",
    "RetryUntilSuccessful": "重试子节点，直到执行成功为止。",
    "RunOnce": "只执行一次子节点，避免重复执行。",
    "Timeout": "设置超时限制，子节点必须在限定时间内完成，否则返回 FAILURE。",
    "SubTree": "用于嵌套执行一组节点，形成一个子树，便于结构化管理复杂行为。"
  }
}