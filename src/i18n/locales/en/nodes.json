{
  "controlFlow": "Control Flow",
  "composite": "Composite",
  "decorator": "Decorator",
  "action": "Action",
  "condition": "Condition",
  "subtree": "Subtree",
  "sequence": "Sequence",
  "selector": "Selector",
  "fallback": "Fallback",
  "parallel": "Parallel",
  "sequenceWithMemory": "Sequence with Memory",
  "selectorWithMemory": "Selector with Memory",
  "reactiveSequence": "Reactive Sequence",
  "reactiveSelector": "Reactive Selector",
  "randomSequence": "Random Sequence",
  "randomSelector": "Random Selector",
  "ifThenElse": "If Then Else",
  "whileDoElse": "While Do Else",
  "inverter": "Inverter",
  "forceSuccess": "Force Success",
  "forceFailure": "Force Failure",
  "repeat": "Repeat",
  "retry": "Retry",
  "timeout": "Timeout",
  "delay": "Delay",
  "cooldown": "Cooldown",
  "blackboardPrecondition": "Blackboard Precondition",
  "blackboardCheck": "Blackboard Check",
  "alwaysSuccess": "Always Success",
  "alwaysFailure": "Always Failure",
  "alwaysRunning": "Always Running",
  "customAction": "Custom Action",
  "customCondition": "Custom Condition",
  "scriptAction": "Script Action",
  "scriptCondition": "Script Condition",
  "moveToTarget": "Move To Target",
  "rotate": "Rotate",
  "wait": "Wait",
  "log": "Log",
  "setBlackboard": "Set Blackboard",
  "getBlackboard": "Get Blackboard",
  "isTargetReached": "Is Target Reached",
  "isInRange": "Is In Range",
  "hasTarget": "Has Target",
  "isHealthLow": "Is Health Low",
  "isEnemyVisible": "Is Enemy Visible",
  "isPathClear": "Is Path Clear",
  "nodeCategories": {
    "all": "All",
    "control": "Control Flow",
    "action": "Action",
    "condition": "Condition",
    "decorator": "Decorator",
    "custom": "Custom",
    "favorite": "Favorite",
    "recent": "Recently Used"
  },
  "nodeStatus": {
    "idle": "Idle",
    "running": "Running",
    "success": "Success",
    "failure": "Failure",
    "invalid": "Invalid",
    "skipped": "Skipped"
  },
  "nodeResults": {
    "undefined": "Undefined",
    "success": "Success",
    "failure": "Failure",
    "running": "Running"
  },
  "portTypes": {
    "input": "Input",
    "output": "Output",
    "bidirectional": "Bidirectional"
  },
  "dataTypes": {
    "string": "String",
    "number": "Number",
    "boolean": "Boolean",
    "vector": "Vector",
    "object": "Object",
    "array": "Array",
    "any": "Any"
  },
  "nodeNames": {
    "AlwaysFailure": "Always Failure",
    "AlwaysSuccess": "Always Success",
    "Script": "Script",
    "SetBlackboard": "Set Blackboard",
    "Sleep": "Sleep",
    "ScriptCondition": "Script Condition",
    "AsyncFallback": "Async Fallback",
    "AsyncSequence": "Async Sequence",
    "Fallback": "Fallback",
    "IfThenElse": "If Then Else",
    "Parallel": "Parallel",
    "ParallelAll": "Parallel All",
    "ReactiveFallback": "Reactive Fallback",
    "ReactiveSequence": "Reactive Sequence",
    "Sequence": "Sequence",
    "SequenceWithMemory": "Sequence with Memory",
    "Switch2": "Switch 2",
    "Switch3": "Switch 3",
    "Switch4": "Switch 4",
    "Switch5": "Switch 5",
    "Switch6": "Switch 6",
    "WhileDoElse": "While Do Else",
    "Delay": "Delay",
    "ForceFailure": "Force Failure",
    "ForceSuccess": "Force Success",
    "Inverter": "Inverter",
    "KeepRunningUntilFailure": "Keep Running Until Failure",
    "LoopDouble": "Loop Double",
    "LoopString": "Loop String"
  },
  "categoryNames": {
    "action": "Action Nodes",
    "condition": "Condition Nodes",
    "control": "Control Nodes",
    "decorator": "Decorator Nodes"
  },
  "collapseSubtree": "Collapse Subtree",
  "expandSubtree": "Expand Subtree",
  "parameters": "Parameters",
  "ports": "Ports",
  "default": "Default",
  "searchNodes": "Search nodes...",
  "totalNodes": "Total {{count}} nodes",
  "searchResult": "Search",
  "actionNodes": "Action Nodes",
  "conditionNodes": "Condition Nodes",
  "controlNodes": "Control Nodes",
  "decoratorNodes": "Decorator Nodes",
  "subtreeNodes": "Subtree Nodes",
  "actionNodesDesc": "Leaf nodes that execute specific actions",
  "conditionNodesDesc": "Leaf nodes that check condition states",
  "controlNodesDesc": "Nodes that control behavior tree execution flow",
  "decoratorNodesDesc": "Decorator nodes that modify child node behavior",
  "subtreeNodesDesc": "Nodes used for nested execution of a group of nodes, forming a subtree",
  "nodeDescriptions": {
    "AlwaysFailure": "Always returns FAILURE regardless of child node execution result, typically used for quick fallback.",
    "AlwaysSuccess": "Always returns SUCCESS regardless of child node execution result, commonly used to absorb failures and ensure parent node continues execution.",
    "Script": "Executes specified scripts, usually user-defined operations or functions.",
    "SetBlackboard": "Stores data in the blackboard for use by other nodes. Used to record node states or update shared data.",
    "Sleep": "Delays execution, pauses current node execution, used for waiting or delay operations.",
    "ScriptCondition": "Executes script condition checks, usually used to verify if certain conditions are met, determining behavior tree flow.",
    "AsyncFallback": "Asynchronous fallback node, executes child nodes one by one until a child node returns SUCCESS or FAILURE.",
    "AsyncSequence": "Asynchronous sequence node, executes each child node in order until all nodes return SUCCESS or a node returns FAILURE.",
    "Fallback": "Fallback node, if current node fails, executes the next child node.",
    "IfThenElse": "If condition is met, executes one child node, otherwise executes another child node.",
    "Parallel": "Executes multiple child nodes in parallel until certain success/failure conditions are met.",
    "ParallelAll": "Similar to Parallel, but returns SUCCESS only when all child nodes succeed.",
    "ReactiveFallback": "Asynchronous fallback node, similar to Fallback, but performs real-time fallback when state changes.",
    "ReactiveSequence": "Asynchronous sequence node, similar to Sequence, but can re-evaluate execution order when node state changes.",
    "Sequence": "Sequence node, executes child nodes in order until a node returns FAILURE.",
    "SequenceWithMemory": "Sequence node with memory function, records execution state of each node and can re-execute later.",
    "Switch2": "Selection node, chooses to execute different child nodes based on conditions.",
    "Switch3": "Similar to Switch2, but with three selection conditions.",
    "Switch4": "Four selection conditions, executes different child nodes based on different conditions.",
    "Switch5": "Similar to Switch4, but with five selection conditions.",
    "Switch6": "Six selection conditions, executes different child nodes based on different conditions.",
    "WhileDoElse": "When condition is met, repeatedly executes a child node, otherwise executes backup node.",
    "Delay": "Delay execution node, executes child node after a specified time period.",
    "ForceFailure": "Forces node to return FAILURE regardless of child node execution result.",
    "ForceSuccess": "Forces node to return SUCCESS regardless of child node execution result.",
    "Inverter": "Inverts child node execution result, SUCCESS becomes FAILURE and vice versa.",
    "KeepRunningUntilFailure": "Keeps running until child node fails, commonly used for executing long-running tasks until reaching a failure condition.",
    "LoopDouble": "Repeats execution of child node twice.",
    "LoopString": "Loops execution of node based on string conditions.",
    "Precondition": "Checks certain conditions before executing node, skips node if conditions are not met.",
    "Repeat": "Repeatedly executes child node until certain conditions are met (such as success, failure, etc.).",
    "RetryUntilSuccessful": "Retries child node until execution succeeds.",
    "RunOnce": "Executes child node only once, avoiding repeated execution.",
    "Timeout": "Sets timeout limit, child node must complete within the time limit, otherwise returns FAILURE.",
    "SubTree": "Used for nested execution of a group of nodes, forming a subtree for structured management of complex behaviors."
  }
}